{"version":3,"sources":["shared/components/UIElement/Card.js","shared/components/UIElement/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","title","width","height","id","src","coordinates","lat","toString","lng","frameBorder","scrolling","marginHeight","marginWidth","PlaceItem","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","authCtx","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","Authorization","token","onDelete","Fragment","ErrorModal","onClose","LoadingSpinner","asOverlay","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","padding","inverse","danger","image","alt","description","userId","creatorId","to","PlaceList","items","length","map","place","key","creator","location","onDeletePlace","UserPlaces","useParams","loadedPlaces","setLoadedPlaces","useEffect","response","places","getUsersPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,6NCeEC,G,MAlBH,SAACJ,GACZ,OACC,yBAAKC,UAAS,cAASD,EAAMC,WAAaC,MAAOF,EAAME,OACtD,4BACCG,MAAM,MACNC,MAAM,OACNC,OAAO,OACPC,GAAG,cACHC,IAAG,yCAAoCT,EAAMU,YAAYC,IAAIC,WAA1D,YAAwEZ,EAAMU,YAAYG,IAAID,WAA9F,wCACHE,YAAY,IACZC,UAAU,KACVC,aAAa,IACbC,YAAY,S,gBCwGDC,G,MA1GG,SAAClB,GAClB,MAA8BmB,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAEMC,EAAUC,qBAAWC,KAE3B,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAMjCC,EAAkB,WACvBX,GAAW,IAONY,EAAsB,WAC3BV,GAAoB,IAGfW,EAAoB,uCAAG,sBAAAC,EAAA,6DAC5BZ,GAAoB,GADQ,kBAIrBO,EACLM,iCAAA,sBAAmDpC,EAAMQ,IACzD,SACA,KACA,CAAE6B,cAAc,UAAD,OAAYb,EAAQc,SART,OAU3BtC,EAAMuC,SAASvC,EAAMQ,IAVM,uGAAH,qDAc1B,OACC,kBAAC,IAAMgC,SAAP,KACC,kBAACC,EAAA,EAAD,CAAYZ,MAAOA,EAAOa,QAASX,IAClCH,GAAa,kBAACe,EAAA,EAAD,CAAgBC,WAAS,IACvC,kBAACC,EAAA,EAAD,CACCC,KAAM1B,EACN2B,SAAUf,EACVgB,OAAQhD,EAAMiD,QACdC,aAAa,4BACbC,YAAY,4BACZC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAAStB,GAAjB,UAER,yBAAK/B,UAAU,gBAAgBC,MAAO,CAAEqD,QAAS,QAChD,kBAAC,EAAD,CAAK7C,YAAaV,EAAMU,gBAG1B,kBAACmC,EAAA,EAAD,CACCC,KAAMxB,EACNyB,SAAUd,EACVe,OAAO,gBACPG,YAAY,4BACZC,OACC,kBAAC,IAAMZ,SAAP,KACC,kBAACa,EAAA,EAAD,CAAQG,SAAO,EAACF,QAASrB,GAAzB,UAGA,kBAACoB,EAAA,EAAD,CAAQI,QAAM,EAACH,QAASpB,GAAxB,YAMF,oGAID,wBAAIjC,UAAU,cACb,kBAACF,EAAA,EAAD,CAAME,UAAU,uBACf,yBAAKA,UAAU,qBACd,yBACCQ,IAAK2B,iCAAA,WAAwCpC,EAAM0D,OACnDC,IAAK3D,EAAMK,SAGb,yBAAKJ,UAAU,oBACd,4BAAKD,EAAMK,OACX,4BAAKL,EAAMiD,SACX,2BAAIjD,EAAM4D,cAEX,yBAAK3D,UAAU,uBACd,kBAACoD,EAAA,EAAD,CAAQC,QAhFU,WACtBjC,GAAW,IA+E0BmC,SAAO,GAAxC,eAGChC,EAAQqC,SAAW7D,EAAM8D,WACzB,oCACC,kBAACT,EAAA,EAAD,CAAQU,GAAE,kBAAa/D,EAAMQ,KAA7B,QACA,kBAAC6C,EAAA,EAAD,CAAQI,QAAM,EAACH,QA9EW,WAChC/B,GAAoB,KA6Ed,iBCtEOyC,G,MA/BG,SAAChE,GAClB,OAA2B,IAAvBA,EAAMiE,MAAMC,OAEd,yBAAKjE,UAAU,qBACd,kBAACF,EAAA,EAAD,KACC,kEACA,kBAACsD,EAAA,EAAD,CAAQU,GAAG,eAAX,iBAOH,wBAAI9D,UAAU,cACZD,EAAMiE,MAAME,KAAI,SAACC,GAAD,OAChB,kBAAC,EAAD,CACCC,IAAKD,EAAM5D,GACXA,GAAI4D,EAAM5D,GACVkD,MAAOU,EAAMV,MACbrD,MAAO+D,EAAM/D,MACbuD,YAAaQ,EAAMR,YACnBX,QAASmB,EAAMnB,QACVa,UAAWM,EAAME,QACjB5D,YAAa0D,EAAMG,SACxBhC,SAAUvC,EAAMwE,sBCSNC,UA/BI,SAACzE,GACnB,IAAQ6D,EAAWa,cAAXb,OACR,EAAsDlC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEvC,EAAwCZ,mBAAS,IAAjD,mBAAOwD,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,YACW,uCAAG,4BAAA1C,EAAA,sEACCL,EACtBM,iCAAA,2BAAwDyB,IAFnC,OAChBiB,EADgB,OAItBF,EAAgBE,EAASC,QAJH,2CAAH,qDAMpBC,KACE,CAAClD,EAAa+B,IAMjB,OACC,kBAAC,IAAMrB,SAAP,KACC,kBAACC,EAAA,EAAD,CAAYZ,MAAOA,EAAOa,QAASX,IAClCH,GAAa,kBAACe,EAAA,EAAD,CAAgBC,WAAS,KACrChB,GAAa+C,GACd,kBAAC,EAAD,CAAWV,MAAOU,EAAcH,cATP,SAACS,GAC1BL,GAAgB,SAACM,GAAgB,OAAOA,EAAWC,QAAO,SAAAf,GAAK,OAAIA,EAAM5D,KAAOyE","file":"static/js/7.eb330e1d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\r\n\r\nimport \"./Map.css\";\r\n\r\nconst Map = (props) => {\r\n\treturn (\r\n\t\t<div className={`map ${props.className}`} style={props.style}>\r\n\t\t\t<iframe\r\n\t\t\t\ttitle=\"map\"\r\n\t\t\t\twidth=\"100%\"\r\n\t\t\t\theight=\"100%\"\r\n\t\t\t\tid=\"gmap_canvas\"\r\n\t\t\t\tsrc={`https://maps.google.com/maps?q=${props.coordinates.lat.toString()},${props.coordinates.lng.toString()}&t=&z=13&ie=UTF8&iwloc=&output=embed`}\r\n\t\t\t\tframeBorder=\"0\"\r\n\t\t\t\tscrolling=\"no\"\r\n\t\t\t\tmarginHeight=\"0\"\r\n\t\t\t\tmarginWidth=\"0\"\r\n\t\t\t></iframe>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Map;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport { useHttpClient } from \"../../shared/hooks/http-hooks\";\r\n\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nimport ErrorModal from \"../../shared/components/UIElement/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElement/LoadingSpinner\";\r\nimport Card from \"../../shared/components/UIElement/Card\";\r\nimport Map from \"../../shared/components/UIElement/Map\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Modal from \"../../shared/components/UIElement/Modal\";\r\nimport \"./PlaceItem.css\";\r\n\r\nconst PlaceItem = (props) => {\r\n\tconst [showMap, setShowMap] = useState(false);\r\n\tconst [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n\tconst authCtx = useContext(AuthContext);\r\n\r\n\tconst { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n\tconst openMapHandler = () => {\r\n\t\tsetShowMap(true);\r\n\t};\r\n\r\n\tconst closeMapHandler = () => {\r\n\t\tsetShowMap(false);\r\n\t};\r\n\r\n\tconst showDeleteWarningHandler = () => {\r\n\t\tsetShowConfirmModal(true);\r\n\t};\r\n\r\n\tconst cancelDeleteHandler = () => {\r\n\t\tsetShowConfirmModal(false);\r\n\t};\r\n\r\n\tconst confirmDeleteHandler = async () => {\r\n\t\tsetShowConfirmModal(false);\r\n\r\n\t\ttry {\r\n\t\t\tawait sendRequest(\r\n\t\t\t\tprocess.env.REACT_APP_BACKEND_URL + `/api/places/${props.id}`,\r\n\t\t\t\t\"DELETE\",\r\n\t\t\t\tnull,\r\n\t\t\t\t{ Authorization: `Bearer ${authCtx.token}` }\r\n\t\t\t);\r\n\t\t\tprops.onDelete(props.id);\r\n\t\t} catch (e) {}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<ErrorModal error={error} onClose={clearError} />\r\n\t\t\t{isLoading && <LoadingSpinner asOverlay />}\r\n\t\t\t<Modal\r\n\t\t\t\tshow={showMap}\r\n\t\t\t\tonCancel={closeMapHandler}\r\n\t\t\t\theader={props.address}\r\n\t\t\t\tcontentClass=\"place-item__modal-content\"\r\n\t\t\t\tfooterClass=\"place-item__modal-actions\"\r\n\t\t\t\tfooter={<Button onClick={closeMapHandler}>CLOSE</Button>}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"map-container\" style={{ padding: \"5px\" }}>\r\n\t\t\t\t\t<Map coordinates={props.coordinates} />\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t\t<Modal\r\n\t\t\t\tshow={showConfirmModal}\r\n\t\t\t\tonCancel={cancelDeleteHandler}\r\n\t\t\t\theader=\"Are you sure?\"\r\n\t\t\t\tfooterClass=\"place-item__modal-actions\"\r\n\t\t\t\tfooter={\r\n\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t<Button inverse onClick={cancelDeleteHandler}>\r\n\t\t\t\t\t\t\tCANCEL\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button danger onClick={confirmDeleteHandler}>\r\n\t\t\t\t\t\t\tDELETE\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tAre you sure want to delete this place? This action can't be undone!\r\n\t\t\t\t</p>\r\n\t\t\t</Modal>\r\n\t\t\t<li className=\"place-item\">\r\n\t\t\t\t<Card className=\"place-item__content\">\r\n\t\t\t\t\t<div className=\"place-item__image\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={process.env.REACT_APP_BACKEND_URL + `/${props.image}`}\r\n\t\t\t\t\t\t\talt={props.title}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"place-item__info\">\r\n\t\t\t\t\t\t<h2>{props.title}</h2>\r\n\t\t\t\t\t\t<h3>{props.address}</h3>\r\n\t\t\t\t\t\t<p>{props.description}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"place-item__actions\">\r\n\t\t\t\t\t\t<Button onClick={openMapHandler} inverse>\r\n\t\t\t\t\t\t\tVIEW ON MAP\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t{authCtx.userId === props.creatorId && (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<Button to={`/places/${props.id}`}>EDIT</Button>\r\n\t\t\t\t\t\t\t\t<Button danger onClick={showDeleteWarningHandler}>\r\n\t\t\t\t\t\t\t\t\tDELETE\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Card>\r\n\t\t\t</li>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default PlaceItem;\r\n","import React from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElement/Card\";\r\nimport PlaceItem from \"./PlaceItem\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport \"./PlaceList.css\";\r\n\r\nconst PlaceList = (props) => {\r\n\tif (props.items.length === 0) {\r\n\t\treturn (\r\n\t\t\t<div className=\"place-list center\">\r\n\t\t\t\t<Card>\r\n\t\t\t\t\t<h2>No places found. Maybe create one?</h2>\r\n\t\t\t\t\t<Button to='/places/new'>Share Place</Button>\r\n\t\t\t\t</Card>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ul className=\"place-list\">\r\n\t\t\t{props.items.map((place) => (\r\n\t\t\t\t<PlaceItem\r\n\t\t\t\t\tkey={place.id}\r\n\t\t\t\t\tid={place.id}\r\n\t\t\t\t\timage={place.image}\r\n\t\t\t\t\ttitle={place.title}\r\n\t\t\t\t\tdescription={place.description}\r\n\t\t\t\t\taddress={place.address}\r\n          creatorId={place.creator}\r\n          coordinates={place.location}\r\n\t\t\t\t\tonDelete={props.onDeletePlace}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default PlaceList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { useHttpClient } from \"../../shared/hooks/http-hooks\";\r\n\r\nimport ErrorModal from \"../../shared/components/UIElement/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElement/LoadingSpinner\";\r\nimport PlaceList from \"../components/PlaceList\";\r\n\r\nconst UserPlaces = (props) => {\r\n\tconst { userId } = useParams();\r\n\tconst { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n\tconst [loadedPlaces, setLoadedPlaces] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getUsersPlaces = async () => {\r\n\t\t\tconst response = await sendRequest(\r\n\t\t\t\tprocess.env.REACT_APP_BACKEND_URL + `/api/places/user/${userId}`\r\n\t\t\t);\r\n\t\t\tsetLoadedPlaces(response.places);\r\n\t\t};\r\n\t\tgetUsersPlaces();\r\n\t}, [sendRequest, userId]);\r\n\r\n\tconst placeDeletedHandler = (deletedPlaceId) => {\r\n    setLoadedPlaces((prevPlaces) => {return prevPlaces.filter(place => place.id !== deletedPlaceId)});\r\n  };\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<ErrorModal error={error} onClose={clearError} />\r\n\t\t\t{isLoading && <LoadingSpinner asOverlay />}\r\n\t\t\t{!isLoading && loadedPlaces && (\r\n\t\t\t\t<PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\r\n\t\t\t)}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default UserPlaces;\r\n"],"sourceRoot":""}